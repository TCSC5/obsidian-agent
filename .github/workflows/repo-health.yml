name: Repo health audit

on:
  workflow_dispatch:
  schedule:
    - cron: "0 10 * * 1" # Mondays 10:00 UTC

permissions:
  contents: read
  security-events: read
  pull-requests: write   # only to post notices/comments if you add that later
  issues: write

jobs:
  labels-and-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # actions/checkout v5.0.0 (pinned)

      - name: Ensure required labels (create if missing)
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd  # actions/github-script v8.0.0 (pinned)
        with:
          script: |
            // Canonical labels that should exist in every repo.
            const mustHave = [
              "deps","ci","security","automerge",
              "priority:P0","priority:P1","priority:P2",
              "status:needs-triage","status:needs-info","status:in-progress","status:blocked","status:ready-to-merge"
            ];
            // Nice-to-have â€” canonical + common legacy.
            const goodToHave = [
              "type:bug","type:feature","type:docs","type:test","type:refactor","type:chore","type:perf",
              "breaking-change","release:major","release:minor","release:patch","backport",
              "bug","documentation","enhancement","duplicate","wontfix","invalid","question"
            ];

            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // Fetch existing labels (first 200)
            const { data: labels } = await github.rest.issues.listLabelsForRepo({ owner, repo, per_page: 200 });
            const have = new Set(labels.map(l => l.name));

            const missingCritical = mustHave.filter(n => !have.has(n));
            const missingNice     = goodToHave.filter(n => !have.has(n));

            // Deterministic but pretty colors for the labels we might create
            const palette = [
              "0E8A16","0366D6","6F42C1","D93F0B","1D76DB","B60205","0052CC","2CBE4E","A2EEEF","FBCA04","C2E0C6","F9D0C4"
            ];
            const pickColor = (name) => palette[(name.length * 131) % palette.length];

            // Create missing critical labels
            for (const name of missingCritical) {
              try {
                await github.rest.issues.createLabel({
                  owner, repo,
                  name,
                  color: pickColor(name),
                  description: "Managed by repo-health audit"
                });
                core.notice(`Created required label: ${name}`);
              } catch (e) {
                core.warning(`Could not create required label '${name}': ${e.message}`);
              }
            }

            // Warn on nice-to-have; create them too to be self-healing (optional).
            for (const name of missingNice) {
              try {
                await github.rest.issues.createLabel({
                  owner, repo,
                  name,
                  color: pickColor(name),
                  description: "Managed by repo-health audit (nice-to-have)"
                });
                core.notice(`Created optional label: ${name}`);
              } catch (e) {
                core.warning(`Could not create optional label '${name}': ${e.message}`);
              }
            }

            if (missingCritical.length === 0) {
              core.notice("All required labels are present.");
            }

      - name: Validate dependabot.yml presence & basics
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f .github/dependabot.yml ]]; then
            echo "::error ::.github/dependabot.yml not found"
            exit 1
          fi
          if ! grep -Fq 'package-ecosystem: \"pip\"' .github/dependabot.yml; then
            echo "::error ::pip ecosystem missing in .github/dependabot.yml"
            exit 1
          fi
          if ! grep -Fq 'package-ecosystem: \"github-actions\"' .github/dependabot.yml; then
            echo "::error ::github-actions ecosystem missing in .github/dependabot.yml"
            exit 1
          fi
          grep -Fq 'groups:' .github/dependabot.yml || echo "::warning ::No groups configured (you may get more PRs)"
          grep -Fq 'labels: [\"deps' .github/dependabot.yml || echo "::notice ::Dependabot PRs are not labeled 'deps'"
          echo "::notice ::dependabot.yml found and parsed"

      - name: Check dependency-submission workflow exists
        shell: bash
        run: |
          set -euo pipefail
          if grep -Rql 'python-dependency-submission' .github/workflows 2>/dev/null; then
            echo "::notice ::Dependency submission workflow present."
          else
            echo "::warning ::No dependency-submission workflow found (transitive deps may not be submitted)."
          fi

  resource-yaml-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # actions/checkout v5.0.0 (pinned)
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # actions/setup-python v6.0.0 (pinned)
        with:
          python-version: '3.11'

      - name: Lint resource front-matter
        shell: bash
        run: |
          set -euo pipefail
          pip install --disable-pip-version-check --no-input python-frontmatter
          python - <<'PY'
          import sys, pathlib, frontmatter
          ROOT = pathlib.Path("Resources/learning_inputs")
          required = {"title","type","domain","tags"}
          missing_any = False
          if not ROOT.exists():
              print("::notice ::Resources/learning_inputs/ not present (skipping resource lint).")
              sys.exit(0)
          for p in ROOT.rglob("*.md"):
              post = frontmatter.load(p)
              keys = set(post.keys())
              missing = required - keys
              if missing:
                  print(f"::error file={p}::Missing front-matter keys: {', '.join(sorted(missing))}")
                  missing_any = True
              if post.get("type") != "resource":
                  print(f"::error file={p}::type should be 'resource'")
                  missing_any = True
              tags = post.get("tags")
              if not isinstance(tags, (list, tuple)) or len(tags) == 0:
                  print(f"::warning file={p}::tags should be a non-empty list")
          sys.exit(1 if missing_any else 0)
          PY
